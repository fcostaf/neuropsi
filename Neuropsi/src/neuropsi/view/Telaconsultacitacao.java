/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package neuropsi.view;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import static neuropsi.Neuropsi.ttra;
import neuropsi.controller.CitacaoController;
import neuropsi.dao.ExceptionDAO;
import neuropsi.model.Citacao;

/**
 *
 * @author 771000343
 */
public class Telaconsultacitacao extends javax.swing.JFrame {

    /**
     * Creates new form Telaconsultacitacao
     */
    public Telaconsultacitacao() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBoxTagConsulta = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabelTagsConsulta = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableConsultaCitacao = new javax.swing.JTable();
        jButtonFiltrar = new javax.swing.JButton();
        jButtonFechar = new javax.swing.JButton();
        jButtonRemover = new javax.swing.JButton();
        jComboBoxRemover = new javax.swing.JComboBox<>();
        jButtonLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("CONSULTA CITAÇÃO");

        jLabel2.setText("Tag:");

        jTableConsultaCitacao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idcitacao", "Fonte", "Citacao", "Comentarios"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableConsultaCitacao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableConsultaCitacaoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableConsultaCitacao);

        jButtonFiltrar.setText("Filtrar");
        jButtonFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFiltrarActionPerformed(evt);
            }
        });

        jButtonFechar.setText("Fechar");
        jButtonFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharActionPerformed(evt);
            }
        });

        jButtonRemover.setText("Remover");
        jButtonRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoverActionPerformed(evt);
            }
        });

        jButtonLimpar.setText("Limpar");
        jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(323, 323, 323)
                        .addComponent(jButtonFechar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jLabel2)
                        .addGap(36, 36, 36)
                        .addComponent(jComboBoxTagConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonFiltrar)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonRemover)
                                .addGap(33, 33, 33)
                                .addComponent(jComboBoxRemover, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(299, 299, 299)
                        .addComponent(jLabelTagsConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(116, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButtonLimpar)
                .addGap(378, 378, 378))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxTagConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jButtonFiltrar)
                            .addComponent(jButtonRemover))
                        .addGap(18, 18, 18)
                        .addComponent(jButtonLimpar)
                        .addGap(49, 49, 49)
                        .addComponent(jLabelTagsConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFechar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jComboBoxRemover, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    ArrayList <String> tags=new ArrayList();
    
    private void executaFiltro(){
        ArrayList<String> tagsRelevantes=new ArrayList<>();
        CitacaoController cc=new CitacaoController();
        int n=0;
        try{
            //lista todas as citações, coleta as tags de cada citação e soma a n número de tags que também estão em tags(Array)
            //se n for igual ao tamanho de tags(Array), quer dizer que a citação possui todas as tags do filtro e é adicionada ao filtroCitacao
            ArrayList<Citacao> listaCitacao=cc.listarCitacao();
            ArrayList<Citacao> filtroCitacao=new ArrayList<>();
            Iterator<Citacao> iterator=listaCitacao.iterator();
            while(iterator.hasNext()){
                Citacao c=iterator.next();
                c.setTags(cc.coletarTags(c.getIdcitacao()));
                for(String tag:tags){
                    if(c.getTags().contains(tag)){
                        n+=1;
                    }
                }if(n==tags.size()){
                    filtroCitacao.add(c);
                }
                n=0;
            }
            //
            //ordena tags alfabeticamente
        Collections.sort(tags);
        //
            //citações do filtroCitacao são adicionadas à tabela
            //adiciona à tagsRelevantes as tags de cada citação que ainda não estão nessa lista
            Iterator<Citacao> iteratorF=filtroCitacao.iterator();
            DefaultTableModel tableModel=(DefaultTableModel)jTableConsultaCitacao.getModel();
            tableModel.setRowCount(0);
            while(iteratorF.hasNext()){
                
                Citacao c=iteratorF.next();
                tableModel.addRow(new Object[]{c.getIdcitacao(),c.getFonte(),c.getDescricao(),c.getComentarios()});
                for(String tag:c.getTags()){
                    if(tagsRelevantes.contains(tag)){
                    }else{
                        tagsRelevantes.add(tag);
                    }
                }
            }
            //
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Erro: "+e);
        }
        
        //ordena as tags alfabeticamente
        //deleta todos os itens do jCombo
        //seleciona as tags de tagsRelevantes que estão em tags(Array), para serem deletadas de tagsRelevantes
        //adiciona cada tag que sobrou de tagsRelevantes ao jCombo
        //agora o jCombo só possui tags referentes às citações da tabela atual
        
        Collections.sort(tags);
        Collections.sort(tagsRelevantes);
        jComboBoxTagConsulta.removeAllItems();
        ArrayList<String> tagsDel=new ArrayList<>();
        for(String tag:tagsRelevantes){
            if(tags.contains(tag)){
                tagsDel.add(tag);
            }
        }
        for(String tag:tagsDel){
            tagsRelevantes.remove(tag);
        }
        for(String tag:tagsRelevantes){
            jComboBoxTagConsulta.addItem(tag);
        }
        //
        
        
        
        //adicona as tags do filtro (tags(Array)) ao JComboBoxRemover
        jComboBoxRemover.removeAllItems();
        for(String tag:tags){
            jComboBoxRemover.addItem(tag);
        }
        //
        
        //lista tags(Array) no JLabel
        String listaTags="";
        for(String tag:tags){
            listaTags+=tag+",";
        }
        if(tags.size()>=1){
            jLabelTagsConsulta.setText(listaTags.substring(0, listaTags.length()-1));
        }else{
            jLabelTagsConsulta.setText("");
        }
        //
    }
    private void jButtonFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFiltrarActionPerformed
        //adiciona a tag do jCombo à tags
        tags.add((String)jComboBoxTagConsulta.getSelectedItem());
        //
        executaFiltro();
    }//GEN-LAST:event_jButtonFiltrarActionPerformed

    private void jButtonFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButtonFecharActionPerformed

    private void jTableConsultaCitacaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableConsultaCitacaoMouseClicked
        if(evt.getClickCount()==2){
            String campo1=(String)jTableConsultaCitacao.getModel().getValueAt(jTableConsultaCitacao.getSelectedRow(),0);
            String campo2=(String)jTableConsultaCitacao.getModel().getValueAt(jTableConsultaCitacao.getSelectedRow(),1);
            String campo3=(String)jTableConsultaCitacao.getModel().getValueAt(jTableConsultaCitacao.getSelectedRow(),2);
            String campo4=(String)jTableConsultaCitacao.getModel().getValueAt(jTableConsultaCitacao.getSelectedRow(),3);
                        
            neuropsi.Neuropsi.selecionaDados4(campo1,campo2,campo3,campo4);
            this.setVisible(false);
            ttra.setVisible(true);
            try {
                ttra.selecionaDadosCitacao();
            } catch (ExceptionDAO ex) {
                Logger.getLogger(Telaconsultacitacao.class.getName()).log(Level.SEVERE, null, ex);
            }
            ttra.getjButtonCadastrar1().setEnabled(false);
            ttra.getjButtonAlterar1().setEnabled(true);
            ttra.getjButtonExcluir1().setEnabled(true);
        }
    }//GEN-LAST:event_jTableConsultaCitacaoMouseClicked

    private void jButtonRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoverActionPerformed
        String tagRemover=(String)jComboBoxRemover.getSelectedItem();
        tags.remove(tagRemover);
        executaFiltro();
    }//GEN-LAST:event_jButtonRemoverActionPerformed

    private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed
        tags.removeAll(tags);
        executaFiltro();
    }//GEN-LAST:event_jButtonLimparActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Telaconsultacitacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Telaconsultacitacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Telaconsultacitacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Telaconsultacitacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Telaconsultacitacao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFechar;
    private javax.swing.JButton jButtonFiltrar;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonRemover;
    private javax.swing.JComboBox<String> jComboBoxRemover;
    private javax.swing.JComboBox<String> jComboBoxTagConsulta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelTagsConsulta;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableConsultaCitacao;
    // End of variables declaration//GEN-END:variables

    public JButton getjButtonFechar() {
        return jButtonFechar;
    }

    public void setjButtonFechar(JButton jButtonFechar) {
        this.jButtonFechar = jButtonFechar;
    }

    public JButton getjButtonFiltrar() {
        return jButtonFiltrar;
    }

    public void setjButtonFiltrar(JButton jButtonFiltrar) {
        this.jButtonFiltrar = jButtonFiltrar;
    }

    public JComboBox<String> getjComboBoxTagConsulta() {
        return jComboBoxTagConsulta;
    }

    public void setjComboBoxTagConsulta(JComboBox<String> jComboBoxTagConsulta) {
        this.jComboBoxTagConsulta = jComboBoxTagConsulta;
    }

    public JLabel getjLabel1() {
        return jLabel1;
    }

    public void setjLabel1(JLabel jLabel1) {
        this.jLabel1 = jLabel1;
    }

    public JLabel getjLabel2() {
        return jLabel2;
    }

    public void setjLabel2(JLabel jLabel2) {
        this.jLabel2 = jLabel2;
    }

    public JLabel getjLabelTagsConsulta() {
        return jLabelTagsConsulta;
    }

    public void setjLabelTagsConsulta(JLabel jLabelTagsConsulta) {
        this.jLabelTagsConsulta = jLabelTagsConsulta;
    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public void setjScrollPane1(JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    public JTable getjTableConsultaCitacao() {
        return jTableConsultaCitacao;
    }

    public void setjTableConsultaCitacao(JTable jTableConsultaCitacao) {
        this.jTableConsultaCitacao = jTableConsultaCitacao;
    }
    
}
